// static/js/network-initialization.js
// Inicializaci√≥n y orchestraci√≥n del sistema completo

console.log('üöÄ Cargando sistema de inicializaci√≥n...');

// Estado de la inicializaci√≥n
const inicializacionEstado = {
    inicializado: false,
    intentosInicializacion: 0,
    maxIntentos: 3,
    dependenciasVerificadas: false,
    timeoutInicializacion: null
};

// Lista de dependencias requeridas
const DEPENDENCIAS_REQUERIDAS = [
    { nombre: 'vis.js', verificar: () => typeof vis !== 'undefined' },
    { nombre: 'bootstrap', verificar: () => typeof bootstrap !== 'undefined' },
    { nombre: 'DOM', verificar: () => document.readyState === 'complete' || document.readyState === 'interactive' }
];

// Funci√≥n principal de inicializaci√≥n
async function inicializarSistemaCompleto() {
    if (inicializacionEstado.inicializado) {
        console.log('‚ö†Ô∏è Sistema ya inicializado');
        return;
    }
    
    inicializacionEstado.intentosInicializacion++;
    console.log(`üöÄ Iniciando sistema completo (intento ${inicializacionEstado.intentosInicializacion}/${inicializacionEstado.maxIntentos})...`);
    
    try {
        // 1. Verificar dependencias
        if (!await verificarDependencias()) {
            throw new Error('Dependencias no disponibles');
        }
        
        // 2. Verificar contenedor de red
        const container = document.getElementById('network');
        if (!container) {
            throw new Error('Contenedor de red no encontrado');
        }
        
        // 3. Inicializar n√∫cleo de la red
        console.log('üåê Inicializando n√∫cleo de la red...');
        await window.inicializarRed();
        
        // 4. Verificar que la red se inicializ√≥ correctamente
        const estado = window.obtenerEstadoRed();
        if (!estado.network || !estado.nodes || !estado.edges) {
            throw new Error('Red no se inicializ√≥ correctamente');
        }
        
        // 5. Configurar sistemas adicionales
        await configurarSistemasAdicionales();
        
        // 6. Marcar como inicializado
        inicializacionEstado.inicializado = true;
        
        console.log('üéâ ¬°Sistema completamente inicializado!');
        mostrarMensajeBienvenida();
        
        // 7. Ejecutar post-inicializaci√≥n
        setTimeout(() => {
            ejecutarPostInicializacion();
        }, 2000);
        
    } catch (error) {
        console.error(`‚ùå Error en inicializaci√≥n (intento ${inicializacionEstado.intentosInicializacion}):`, error);
        
        // Reintentar si no se ha alcanzado el m√°ximo
        if (inicializacionEstado.intentosInicializacion < inicializacionEstado.maxIntentos) {
            console.log(`üîÑ Reintentando en 3 segundos...`);
            setTimeout(() => {
                inicializarSistemaCompleto();
            }, 3000);
        } else {
            console.error('‚ùå Fall√≥ la inicializaci√≥n despu√©s de todos los intentos');
            mostrarErrorInicializacion(error);
        }
    }
}

// Funci√≥n para verificar dependencias
async function verificarDependencias() {
    console.log('üîç Verificando dependencias...');
    
    let todasDisponibles = true;
    
    for (const dep of DEPENDENCIAS_REQUERIDAS) {
        const disponible = dep.verificar();
        console.log(`- ${dep.nombre}: ${disponible ? '‚úÖ' : '‚ùå'}`);
        
        if (!disponible) {
            todasDisponibles = false;
        }
    }
    
    if (!todasDisponibles) {
        console.log('‚è≥ Esperando dependencias...');
        
        // Esperar un poco m√°s y verificar de nuevo
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Segunda verificaci√≥n
        todasDisponibles = DEPENDENCIAS_REQUERIDAS.every(dep => dep.verificar());
        console.log(`üîç Segunda verificaci√≥n: ${todasDisponibles ? '‚úÖ' : '‚ùå'}`);
    }
    
    inicializacionEstado.dependenciasVerificadas = todasDisponibles;
    return todasDisponibles;
}

// Funci√≥n para configurar sistemas adicionales
async function configurarSistemasAdicionales() {
    console.log('‚öôÔ∏è Configurando sistemas adicionales...');
    
    try {
        // Configurar sistema de posiciones
        if (typeof window.configurarPosiciones === 'function') {
            window.configurarPosiciones();
            console.log('‚úÖ Sistema de posiciones configurado');
        }
        
        // Configurar sistema de recuperaci√≥n autom√°tica
        if (typeof window.diagnosticoCompletoSistema === 'function') {
            console.log('‚úÖ Sistema de diagn√≥sticos disponible');
        }
        
        // Configurar sistema de persistencia de grupos
        if (typeof window.sincronizarGruposAlCargar === 'function') {
            console.log('‚úÖ Sistema de persistencia disponible');
        }
        
        // Configurar optimizaciones de rendimiento
        if (typeof window.testZoomOptimizado === 'function') {
            console.log('‚úÖ Optimizaciones de rendimiento disponibles');
        }
        
        console.log('‚úÖ Sistemas adicionales configurados');
        
    } catch (error) {
        console.error('‚ùå Error configurando sistemas adicionales:', error);
        throw error;
    }
}

// Funci√≥n para ejecutar tareas post-inicializaci√≥n
async function ejecutarPostInicializacion() {
    console.log('üîß Ejecutando post-inicializaci√≥n...');
    
    try {
        // Sincronizaci√≥n autom√°tica de grupos
        if (typeof window.sincronizarGruposAlCargar === 'function') {
            console.log('üîÑ Sincronizando grupos autom√°ticamente...');
            await window.sincronizarGruposAlCargar();
        }
        
        // Verificar sistema completo
        setTimeout(() => {
            if (typeof window.verificarEstadoSistema === 'function') {
                console.log('üîç Ejecutando verificaci√≥n final del sistema...');
                window.verificarEstadoSistema();
            }
        }, 3000);
        
        console.log('‚úÖ Post-inicializaci√≥n completada');
        
    } catch (error) {
        console.error('‚ùå Error en post-inicializaci√≥n:', error);
    }
}

// Funci√≥n para mostrar mensaje de bienvenida
function mostrarMensajeBienvenida() {
    console.log('üéâ ¬°SISTEMA DE RED SOCIAL LISTO!');
    console.log('================================');
    console.log('üí° Funciones principales disponibles:');
    console.log('- Doble clic en √°rea vac√≠a: Crear nuevo contacto');
    console.log('- Clic en contacto: Ver informaci√≥n detallada');
    console.log('- Arrastrar contactos: Reorganizar red');
    console.log('- Hover sobre contactos: Crear conexiones');
    console.log('');
    console.log('üõ†Ô∏è Funciones de administraci√≥n:');
    console.log('- crearGruposDemo() - Crear grupos de demostraci√≥n');
    console.log('- verificarEstadoSistema() - Diagn√≥stico completo');
    console.log('- debugSistemaCompleto() - Debug con persistencia');
    console.log('- ayudaDiagnosticos() - Ver todas las funciones de debug');
    console.log('================================');
    
    // Mostrar notificaci√≥n visual si est√° disponible
    if (typeof mostrarNotificacion === 'function') {
        mostrarNotificacion('success', '¬°Sistema de red social completamente cargado y listo!', 8000);
    }
}

// Funci√≥n para mostrar error de inicializaci√≥n
function mostrarErrorInicializacion(error) {
    console.error('üö® ERROR CR√çTICO DE INICIALIZACI√ìN');
    console.error('===================================');
    console.error('El sistema no pudo inicializarse correctamente.');
    console.error('Error:', error.message);
    console.error('');
    console.error('üí° Posibles soluciones:');
    console.error('1. Recargar la p√°gina');
    console.error('2. Verificar conexi√≥n a internet');
    console.error('3. Verificar que el servidor est√© funcionando');
    console.error('4. Limpiar cache del navegador');
    console.error('===================================');
    
    // Actualizar estado visual
    if (typeof actualizarEstado === 'function') {
        actualizarEstado(`‚ùå Error cr√≠tico: ${error.message}`, 'error');
    }
    
    // Mostrar notificaci√≥n de error si est√° disponible
    if (typeof mostrarNotificacion === 'function') {
        mostrarNotificacion('error', 
            `Error cr√≠tico de inicializaci√≥n: ${error.message}. Intenta recargar la p√°gina.`, 
            10000
        );
    }
}

// Funci√≥n para reinicializar el sistema
window.reinicializarSistema = async function() {
    console.log('üîÑ Reinicializando sistema completo...');
    
    // Reset del estado
    inicializacionEstado.inicializado = false;
    inicializacionEstado.intentosInicializacion = 0;
    inicializacionEstado.dependenciasVerificadas = false;
    
    // Limpiar timeouts existentes
    if (inicializacionEstado.timeoutInicializacion) {
        clearTimeout(inicializacionEstado.timeoutInicializacion);
    }
    
    // Limpiar sistemas existentes
    if (typeof window.detenerMonitoreoRendimiento === 'function') {
        window.detenerMonitoreoRendimiento();
    }
    
    // Reinicializar
    await inicializarSistemaCompleto();
};

// Funci√≥n para verificar si el sistema est√° listo
window.sistemaBienInicializado = function() {
    const estado = window.obtenerEstadoRed();
    const listo = (
        inicializacionEstado.inicializado &&
        inicializacionEstado.dependenciasVerificadas &&
        estado.network &&
        estado.nodes &&
        estado.edges &&
        estado.redLista
    );
    
    console.log(`üîç Sistema listo: ${listo ? '‚úÖ' : '‚ùå'}`);
    return listo;
};

// Funci√≥n para obtener estad√≠sticas de inicializaci√≥n
window.estadisticasInicializacion = function() {
    const stats = {
        inicializado: inicializacionEstado.inicializado,
        intentos: inicializacionEstado.intentosInicializacion,
        dependenciasOK: inicializacionEstado.dependenciasVerificadas,
        sistemaListo: window.sistemaBienInicializado()
    };
    
    console.log('üìä ESTAD√çSTICAS DE INICIALIZACI√ìN:');
    console.table(stats);
    
    return stats;
};

// Event listeners para inicializaci√≥n autom√°tica
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM cargado, preparando inicializaci√≥n...');
    
    // Esperar un poco para que todos los scripts se carguen
    inicializacionEstado.timeoutInicializacion = setTimeout(() => {
        inicializarSistemaCompleto();
    }, 1000);
});

// Backup: inicializar cuando la ventana est√© completamente cargada
window.addEventListener('load', function() {
    // Solo inicializar si no se ha hecho ya
    if (!inicializacionEstado.inicializado) {
        console.log('üîÑ Window load event - verificando inicializaci√≥n...');
        
        setTimeout(() => {
            if (!inicializacionEstado.inicializado) {
                console.log('üîÑ Iniciando desde window.load...');
                inicializarSistemaCompleto();
            }
        }, 500);
    }
});

// Manejo de errores globales
window.addEventListener('error', function(event) {
    console.error('üö® Error global capturado:', event.error);
    
    // Si el sistema no est√° inicializado y hay un error, podr√≠a ser un problema de inicializaci√≥n
    if (!inicializacionEstado.inicializado) {
        console.error('‚ùå Error durante inicializaci√≥n detectado');
        
        if (typeof mostrarNotificacion === 'function') {
            mostrarNotificacion('error', 
                'Error detectado durante la inicializaci√≥n. Reintentando...', 
                5000
            );
        }
        
        // Reintentar despu√©s de un delay
        setTimeout(() => {
            if (!inicializacionEstado.inicializado && 
                inicializacionEstado.intentosInicializacion < inicializacionEstado.maxIntentos) {
                inicializarSistemaCompleto();
            }
        }, 3000);
    }
});

// Funci√≥n de emergencia para forzar inicializaci√≥n
window.forzarInicializacion = function() {
    console.log('üö® Forzando inicializaci√≥n de emergencia...');
    
    inicializacionEstado.inicializado = false;
    inicializacionEstado.intentosInicializacion = 0;
    
    inicializarSistemaCompleto();
};

// Exportar funci√≥n principal
window.inicializarSistemaCompleto = inicializarSistemaCompleto;

console.log('üöÄ Sistema de inicializaci√≥n cargado - Listo para inicializar');