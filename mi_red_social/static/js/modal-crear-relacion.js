// static/js/modal-crear-relacion.js - Sistema completo del modal de crear relaciones

console.log('üìã Cargando sistema de modal de crear relaciones...');

// Funci√≥n para abrir modal de crear relaci√≥n
async function abrirModalCrearRelacion(nodoOrigen, nodoDestino) {
    console.log('üîÑ Iniciando apertura de modal de relaci√≥n...');
    
    // Limpiar modal anterior
    limpiarModalRelacionAnterior();
    console.log('‚úÖ Modal anterior limpiado');
    
    // Cargar template
    console.log('üîÑ Cargando template del modal...');
    const modalHTML = await cargarTemplateRelacion();
    console.log('‚úÖ Template cargado, longitud:', modalHTML.length);
    
    // Agregar modal al DOM
    console.log('üîÑ Agregando modal al DOM...');
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    console.log('‚úÖ Modal agregado al DOM');
    
    // Verificar que el modal se cre√≥ correctamente
    const modalElement = document.getElementById('modalCrearRelacion');
    if (!modalElement) {
        console.error('‚ùå Error: No se pudo crear el modal de relaci√≥n');
        mostrarNotificacion('error', 'Error creando el formulario de relaci√≥n');
        return false;
    }
    console.log('‚úÖ Elemento modal encontrado:', modalElement);
    
    // Verificar que Bootstrap est√° disponible
    if (typeof bootstrap === 'undefined') {
        console.error('‚ùå Error: Bootstrap no est√° disponible');
        mostrarNotificacion('error', 'Error: Bootstrap no disponible');
        return false;
    }
    console.log('‚úÖ Bootstrap confirmado disponible');
    
    // Inicializar modal de Bootstrap
    console.log('üîÑ Inicializando modal de Bootstrap...');
    try {
        modalCrearRelacion = new bootstrap.Modal(modalElement, {
            backdrop: 'static',
            keyboard: true
        });
        console.log('‚úÖ Modal de Bootstrap inicializado');
    } catch (error) {
        console.error('‚ùå Error inicializando modal de Bootstrap:', error);
        mostrarNotificacion('error', 'Error inicializando modal: ' + error.message);
        return false;
    }
    
    // Configurar contenido del modal
    console.log('üîÑ Configurando contenido del modal...');
    configurarContenidoModalRelacion(nodoOrigen, nodoDestino);
    console.log('‚úÖ Contenido del modal configurado');
    
    // Configurar eventos del modal
    modalElement.addEventListener('shown.bs.modal', function() {
        console.log('‚úÖ Modal de relaci√≥n mostrado correctamente');
        const tipoInput = document.getElementById('tipoRelacion');
        if (tipoInput) {
            tipoInput.focus();
        }
    });
    
    // Limpiar al cerrar modal
    modalElement.addEventListener('hidden.bs.modal', function() {
        console.log('üîÑ Modal de relaci√≥n ocultado, limpiando estado...');
        setTimeout(() => {
            limpiarModalRelacionAnterior();
        }, 100);
    });
    
    // Mostrar modal
    console.log('üîÑ Intentando mostrar modal...');
    try {
        modalCrearRelacion.show();
        console.log('‚úÖ Comando show() ejecutado correctamente');
        
        // Verificar si el modal se est√° mostrando despu√©s de un peque√±o delay
        setTimeout(() => {
            const isShowing = modalElement.classList.contains('show');
            console.log('üîç ¬øModal visible despu√©s de 500ms?', isShowing);
            if (!isShowing) {
                console.warn('‚ö†Ô∏è El modal no parece estar visible, intentando forzar...');
                // Intentar forzar la visualizaci√≥n
                modalElement.style.display = 'block';
                modalElement.classList.add('show');
                document.body.classList.add('modal-open');
                console.log('üîß Forzando visualizaci√≥n del modal');
            }
        }, 500);
        
    } catch (error) {
        console.error('‚ùå Error mostrando modal de relaci√≥n:', error);
        limpiarModalRelacionAnterior();
        mostrarNotificacion('error', 'Error al mostrar el formulario de relaci√≥n: ' + error.message);
        return false;
    }
    
    return true;
}

// Funci√≥n para configurar contenido del modal
function configurarContenidoModalRelacion(nodoOrigen, nodoDestino) {
    const nombreOrigen = obtenerNombreNodo(nodoOrigen);
    const nombreDestino = obtenerNombreNodo(nodoDestino);
    
    console.log('üîÑ Configurando modal para:', nombreOrigen, '‚Üî', nombreDestino);
    
    // Actualizar t√≠tulo
    const titulo = document.getElementById('tituloModalRelacion');
    if (titulo) {
        titulo.innerHTML = `
            <i class="icon icon-link"></i>
            Crear Relaci√≥n: ${nombreOrigen} ‚Üî ${nombreDestino}
        `;
        console.log('‚úÖ T√≠tulo actualizado');
    } else {
        console.warn('‚ö†Ô∏è Elemento t√≠tulo no encontrado');
    }
    
    // Configurar informaci√≥n de los nodos
    const infoOrigen = document.getElementById('infoNodoOrigen');
    const infoDestino = document.getElementById('infoNodoDestino');
    
    if (infoOrigen) {
        infoOrigen.innerHTML = `
            <div class="d-flex align-items-center">
                <div style="width: 20px; height: 20px; background-color: ${nodoOrigen.color}; border-radius: 50%; margin-right: 10px;"></div>
                <strong>${nombreOrigen}</strong>
            </div>
        `;
        console.log('‚úÖ Info origen configurada');
    } else {
        console.warn('‚ö†Ô∏è Elemento infoOrigen no encontrado');
    }
    
    if (infoDestino) {
        infoDestino.innerHTML = `
            <div class="d-flex align-items-center">
                <div style="width: 20px; height: 20px; background-color: ${nodoDestino.color}; border-radius: 50%; margin-right: 10px;"></div>
                <strong>${nombreDestino}</strong>
            </div>
        `;
        console.log('‚úÖ Info destino configurada');
    } else {
        console.warn('‚ö†Ô∏è Elemento infoDestino no encontrado');
    }
    
    // Guardar IDs para uso posterior
    const form = document.getElementById('formCrearRelacion');
    if (form) {
        form.dataset.origenId = nodoOrigen.id;
        form.dataset.destinoId = nodoDestino.id;
        console.log('‚úÖ IDs guardados en el formulario:', nodoOrigen.id, '->', nodoDestino.id);
    } else {
        console.warn('‚ö†Ô∏è Formulario no encontrado');
    }
    
    // Configurar validaci√≥n
    configurarValidacionFormularioRelacion();
    console.log('‚úÖ Configuraci√≥n del modal completada');
}

// Funci√≥n para configurar validaci√≥n del formulario de relaci√≥n
function configurarValidacionFormularioRelacion() {
    const fortalezaInput = document.getElementById('fortalezaRelacion');
    const fortalezaDisplay = document.getElementById('fortalezaDisplay');
    
    if (fortalezaInput && fortalezaDisplay) {
        // Actualizar display de fortaleza en tiempo real
        fortalezaInput.addEventListener('input', function() {
            const valor = this.value;
            fortalezaDisplay.textContent = `${valor}/10`;
            
            // Cambiar color seg√∫n fortaleza
            if (valor >= 8) {
                fortalezaDisplay.className = 'badge bg-success';
            } else if (valor >= 6) {
                fortalezaDisplay.className = 'badge bg-warning';
            } else if (valor >= 4) {
                fortalezaDisplay.className = 'badge bg-info';
            } else {
                fortalezaDisplay.className = 'badge bg-secondary';
            }
        });
        
        // Disparar evento inicial
        fortalezaInput.dispatchEvent(new Event('input'));
    }
}

// Funci√≥n para guardar la nueva relaci√≥n
async function guardarNuevaRelacion() {
    const form = document.getElementById('formCrearRelacion');
    if (!form) {
        console.error('‚ùå Formulario de relaci√≥n no encontrado');
        return;
    }
    
    const formData = new FormData();
    formData.append('persona1_id', form.dataset.origenId);
    formData.append('persona2_id', form.dataset.destinoId);
    formData.append('tipo', document.getElementById('tipoRelacion').value);
    formData.append('fortaleza', document.getElementById('fortalezaRelacion').value);
    formData.append('contexto', document.getElementById('contextoRelacion').value);
    
    const botonGuardar = document.getElementById('btnGuardarRelacion');
    if (!botonGuardar) {
        console.error('‚ùå Bot√≥n guardar relaci√≥n no encontrado');
        return;
    }
    
    const textoOriginal = botonGuardar.innerHTML;
    
    try {
        // Mostrar estado de carga
        botonGuardar.innerHTML = '<i class="icon icon-refresh icon-spin"></i> Creando relaci√≥n...';
        botonGuardar.disabled = true;
        
        console.log('üì§ Enviando datos de relaci√≥n:', Object.fromEntries(formData));
        
        // Enviar datos al servidor
        const response = await fetch('/api/relaciones', {
            method: 'POST',
            body: formData
        });
        
        console.log('üì• Respuesta del servidor:', response.status);
        
        if (response.ok) {
            console.log('‚úÖ Relaci√≥n creada exitosamente');
            
            // Cerrar modal
            if (modalCrearRelacion) {
                modalCrearRelacion.hide();
            }
            
            // Esperar un poco para que el modal se cierre
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // Recargar datos del grafo
            if (typeof recargarSoloDatos === 'function') {
                await recargarSoloDatos();
            } else {
                console.warn('‚ö†Ô∏è Funci√≥n recargarSoloDatos no disponible');
                // Recargar p√°gina como fallback
                window.location.reload();
            }
            
            mostrarNotificacion('success', 'Relaci√≥n creada exitosamente');
            
        } else {
            const errorText = await response.text();
            console.error('‚ùå Error del servidor:', errorText);
            mostrarNotificacion('error', 'Error al crear la relaci√≥n: ' + errorText);
            
            // Restaurar bot√≥n en caso de error
            botonGuardar.innerHTML = textoOriginal;
            botonGuardar.disabled = false;
        }
        
    } catch (error) {
        console.error('‚ùå Error creando relaci√≥n:', error);
        mostrarNotificacion('error', 'Error de conexi√≥n al crear la relaci√≥n');
        
        // Restaurar bot√≥n en caso de error
        botonGuardar.innerHTML = textoOriginal;
        botonGuardar.disabled = false;
    }
}

// Template HTML del modal (fallback si no hay archivo externo)
function obtenerTemplateModalFallback() {
    return `
        <div class="modal fade" id="modalCrearRelacion" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="tituloModalRelacion">
                            <i class="icon icon-link"></i>
                            Crear Nueva Relaci√≥n
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="formCrearRelacion">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Desde:</label>
                                    <div id="infoNodoOrigen" class="p-2 bg-light rounded">
                                        <strong>Nodo Origen</strong>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Hacia:</label>
                                    <div id="infoNodoDestino" class="p-2 bg-light rounded">
                                        <strong>Nodo Destino</strong>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="tipoRelacion" class="form-label">Tipo de Relaci√≥n</label>
                                    <select class="form-select" id="tipoRelacion" required>
                                        <option value="">Seleccionar tipo...</option>
                                        <option value="familiar">Familiar</option>
                                        <option value="amistad">Amistad</option>
                                        <option value="laboral">Laboral</option>
                                        <option value="academico">Acad√©mico</option>
                                        <option value="romantico">Rom√°ntico</option>
                                        <option value="profesional">Profesional</option>
                                        <option value="vecinal">Vecinal</option>
                                        <option value="otro">Otro</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="fortalezaRelacion" class="form-label">
                                        Fortaleza de la Relaci√≥n 
                                        <span id="fortalezaDisplay" class="badge bg-secondary">5/10</span>
                                    </label>
                                    <input type="range" class="form-range" id="fortalezaRelacion" 
                                           min="1" max="10" value="5" required>
                                    <div class="d-flex justify-content-between">
                                        <small class="text-muted">D√©bil</small>
                                        <small class="text-muted">Fuerte</small>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="contextoRelacion" class="form-label">Contexto/Notas</label>
                                <textarea class="form-control" id="contextoRelacion" rows="3" 
                                          placeholder="¬øC√≥mo se conocieron? ¬øEn qu√© contexto interact√∫an?"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="icon icon-x"></i> Cancelar
                        </button>
                        <button type="button" class="btn btn-success" id="btnGuardarRelacion" onclick="guardarNuevaRelacion()">
                            <i class="icon icon-plus"></i> Crear Relaci√≥n
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Funci√≥n mejorada para cargar template con fallback
async function cargarTemplateRelacion() {
    // Si ya hay template en cache, usarlo
    if (typeof relacionTemplate !== 'undefined' && relacionTemplate) {
        return relacionTemplate;
    }
    
    try {
        const response = await fetch('/static/templates/modal-crear-relacion.html');
        if (!response.ok) {
            throw new Error(`Error cargando template: ${response.status}`);
        }
        const template = await response.text();
        
        // Guardar en cache si la variable global existe
        if (typeof window.relacionTemplate !== 'undefined') {
            window.relacionTemplate = template;
        }
        
        console.log('‚úÖ Template del modal de relaci√≥n cargado desde archivo');
        return template;
    } catch (error) {
        console.error('‚ùå Error cargando template del modal de relaci√≥n:', error);
        console.log('üîÑ Usando template fallback incorporado...');
        
        // Usar template fallback
        const fallbackTemplate = obtenerTemplateModalFallback();
        
        // Guardar en cache si la variable global existe
        if (typeof window.relacionTemplate !== 'undefined') {
            window.relacionTemplate = fallbackTemplate;
        }
        
        return fallbackTemplate;
    }
}

// Funci√≥n de utilidad para obtener nombre del nodo (por si no est√° definida)
function obtenerNombreNodo(nodo) {
    if (!nodo) return 'Nodo desconocido';
    if (nodo.label && typeof nodo.label === 'string') {
        return nodo.label.replace(/<[^>]*>/g, '').trim();
    }
    return String(nodo.id || 'Sin nombre');
}

// Funci√≥n de utilidad para mostrar notificaciones (por si no est√° definida)
function mostrarNotificacion(tipo, mensaje, duracion = 5000) {
    console.log(`${tipo.toUpperCase()}: ${mensaje}`);
    
    // Intentar usar funci√≥n global si existe
    if (typeof window.mostrarNotificacion === 'function') {
        window.mostrarNotificacion(tipo, mensaje, duracion);
        return;
    }
    
    // Intentar usar toastr si est√° disponible
    if (typeof toastr !== 'undefined') {
        toastr[tipo](mensaje);
        return;
    }
    
    // Intentar usar SweetAlert si est√° disponible
    if (typeof Swal !== 'undefined') {
        const iconMap = {
            'success': 'success',
            'error': 'error',
            'warning': 'warning',
            'info': 'info'
        };
        
        Swal.fire({
            icon: iconMap[tipo] || 'info',
            title: mensaje,
            timer: 3000,
            showConfirmButton: false
        });
        return;
    }
    
    // Fallback: alert del navegador para errores importantes
    if (tipo === 'error') {
        alert(`Error: ${mensaje}`);
    }
}

// Funci√≥n para limpiar modal (por si no est√° definida en el otro archivo)
function limpiarModalRelacionAnterior() {
    const modalExistente = document.getElementById('modalCrearRelacion');
    if (modalExistente) {
        console.log('üßπ Limpiando modal de relaci√≥n anterior...');
        
        try {
            const bsModal = bootstrap.Modal.getInstance(modalExistente);
            if (bsModal) {
                bsModal.dispose();
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Error disposing modal:', error);
        }
        
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) {
            backdrop.remove();
        }
        
        modalExistente.remove();
    }
    
    // Limpiar variable global si existe
    if (typeof window.modalCrearRelacion !== 'undefined') {
        window.modalCrearRelacion = null;
    }
}

// Exportar funciones para uso global
window.abrirModalCrearRelacion = abrirModalCrearRelacion;
window.configurarContenidoModalRelacion = configurarContenidoModalRelacion;
window.configurarValidacionFormularioRelacion = configurarValidacionFormularioRelacion;
window.guardarNuevaRelacion = guardarNuevaRelacion;
window.cargarTemplateRelacion = cargarTemplateRelacion;
window.limpiarModalRelacionAnterior = limpiarModalRelacionAnterior;

// Funci√≥n de testing para el modal
window.testModalRelacion = async function() {
    console.log('üß™ Test manual del modal de relaci√≥n');
    
    // Crear nodos de prueba
    const nodoTest1 = { id: 'test1', label: 'Nodo Test 1', color: '#ff0000' };
    const nodoTest2 = { id: 'test2', label: 'Nodo Test 2', color: '#00ff00' };
    
    try {
        await abrirModalCrearRelacion(nodoTest1, nodoTest2);
        console.log('‚úÖ Test completado');
    } catch (error) {
        console.error('‚ùå Error en test:', error);
    }
};

console.log('‚úÖ Sistema de modal de crear relaciones cargado');
console.log('üí° Funciones disponibles:');
console.log('  - abrirModalCrearRelacion(nodoOrigen, nodoDestino)');
console.log('  - guardarNuevaRelacion()');
console.log('  - testModalRelacion() - para testing');